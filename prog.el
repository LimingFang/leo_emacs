;; -*- lexical-binding: t -*-
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-ts-mode))
(add-to-list 'auto-mode-alist '("\\.c\\'" . c-ts-mode))
(add-to-list 'auto-mode-alist '("\\.[ch]\\(pp\\|xx\\|\\+\\+\\)\\'" . c++-ts-mode))
(add-to-list 'auto-mode-alist '("CMakeLists\\.txt\\'" . cmake-ts-mode))
(add-to-list 'auto-mode-alist '("\\.go\\'" . go-ts-mode))

(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1)
  )

(use-package eglot
  :ensure t
  :config
  (add-to-list 'eglot-server-programs
               '((c++-mode c++-ts-mode) . ("clangd" "--compile-commands-dir=./build/" "--background-index" "--completion-style=bundled" "--header-insertion=never" "-j" "4" "--pch-storage=memory" "--log=error")))
  (add-to-list 'eglot-server-programs
	       '((python-mode python-ts-mode) . ("pyright-langserver" "--stdio")))
  (add-to-list 'eglot-server-programs
	       '((go-mode go-ts-mode) . ("gopls")))
  (add-hook 'go-ts-mode-hook 'eglot-ensure)
  (add-hook 'c++-ts-mode-hook 'eglot-ensure)
  (setq eglot-ignored-server-capabilities '(:inlayHintProvider :documentHighlightProvider))
  )

(use-package company
  :ensure t
  :custom
  (company-backends '(company-capf company-files))
  (company-minimum-prefix-length 4)
  (company-idle-delay 0.3)
  :hook
  (prog-mode . company-mode))

(use-package xref
  :custom
  (xref-search-program 'ripgrep))

(use-package symbols-outline
  :ensure t
  :bind ("C-c s" . symbols-outline-show)

  :config
  (setq symbols-outline-window-position ':left)
  (setq symbols-outline-fetch-fn #'symbols-outline-lsp-fetch)
  (setq symbols-outline-window-width 45)
  )

(use-package citre
  :ensure t
  :defer t
  :init
  (require 'citre-config)
  (global-set-key (kbd "C-x c j") 'citre-jump)
  (global-set-key (kbd "C-x c J") 'citre-jump-back)
  (global-set-key (kbd "C-x c p") 'citre-ace-peek)
  (global-set-key (kbd "C-x c u") 'citre-update-this-tags-file)
  :custom
  (citre-completion-backends '(eglot))
  (citre-find-definition-backends '(eglot tags))
  (citre-find-reference-backends '(eglot))
  :config
  (setq
   ;; Set this if you want to always use one location to create a tags file.
   citre-default-create-tags-file-location 'global-cache
   ;; Set this if you'd like to use ctags options generated by Citre
   ;; directly, rather than further editing them.
   ;; citre-edit-ctags-options-manually nil
   ;; If you only want the auto enabling citre-mode behavior to work for
   ;; certain modes (like `prog-mode'), set it like this.
   citre-auto-enable-citre-mode-modes '(prog-mode)))

(use-package magit
  :defer t
  :ensure t
  :config
  (remove-hook 'magit-status-headers-hook 'magit-insert-tags-header)
  (add-hook 'magit-status-hook (lambda ()(text-scale-set -1)))
  (add-hook 'magit-revision-hook (lambda ()(text-scale-set -1)))
  (add-hook 'magit-diff-hook (lambda ()(text-scale-set -1)))
  :bind (("C-c m f" . magit-find-file))
  )

(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize)
  )

(use-package format-all
  :ensure t
  :commands format-all-mode
  :config
  (setq-default format-all-formatters
		'(("C++"   (clang-format))
		  ("C"     (clang-format))
                  ("Shell" (shfmt "-i" "2"))
		  ("Go"    (gofmt))))
  :bind (
	 ("C-c C-x b" . format-all-buffer)
	 ("C-c C-x r" . format-all-region))
  )

(use-package rg
  :ensure t
  )

(use-package project
  :ensure t
  :custom
  (project-vc-merge-submodules nil)
  (project-switch-commands '((project-dired "Project Dired")
			     (project-find-file "Find file")
			     (project-find-regexp "Find regexp")
			     (project-find-dir "Find directory")
			     (project-vc-dir "VC-Dir")
			     (project-eshell "Eshell"))))
